# main.py ‚Äî –±–æ—Ç —Å —É–¥–æ–±–Ω—ã–º –º–µ–Ω—é –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π

import asyncio
import logging
import re
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.client.default import DefaultBotProperties
import requests
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "8092555394:AAHwvVmGcJYGw3Gu_LZe4aJ0U3K1v2aHqUw"
CHECK_INTERVAL = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 1 —á–∞—Å
DB_FILE = "tracking.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect(DB_FILE)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS products (
    user_id INTEGER,
    product_id TEXT,
    name TEXT,
    brand TEXT,
    url TEXT,
    current_price INTEGER,
    last_check TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, product_id)
)
""")

conn.commit()


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


def get_cancel_button():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


def get_track_keyboard(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä", callback_data=f"track:{product_id}")]
    ])


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–û–í–ê–†–û–í =====
def extract_product_id(text):
    # –ò–∑ —Å—Å—ã–ª–∫–∏: https://www.wildberries.ru/catalog/12345678/detail.aspx
    if "wildberries.ru" in text:
        match = re.search(r"catalog/(\d+)", text)
        if match:
            return match.group(1)

    # –ò–∑ ID: 12345678
    if text.isdigit() and len(text) >= 6:
        return text

    return None


def get_product_data(product_id):
    def parse_html_price(prod_id):
        try:
            url = f"https://www.wildberries.ru/catalog/{prod_id}/detail.aspx"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept-Language': 'ru-RU,ru;q=0.9'
            }
            response = requests.get(url, headers=headers, timeout=10)

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                price_tag = soup.find('h2', class_='price-history__title')
                if price_tag:
                    price_text = price_tag.get_text(strip=True)
                    return int(''.join(filter(str.isdigit, price_text.replace('&nbsp;', ''))))
        except Exception as e:
            logger.error(f"HTML price error: {e}")
        return None

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        api_url = f"https://card.wb.ru/cards/detail?appType=1&curr=rub&dest=-1257786&nm={product_id}"
        api_response = requests.get(api_url, timeout=10)

        if api_response.status_code != 200:
            return None

        data = api_response.json()
        products = data.get("data", {}).get("products", [])
        if not products:
            return None

        prod = products[0]

        # 2. –ü–∞—Ä—Å–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ HTML
        current_price = parse_html_price(prod['id'])
        if current_price is None:
            current_price = prod.get("salePriceU", 0) // 100
            logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ API (HTML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        return {
            "id": str(prod["id"]),
            "name": prod.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "brand": prod.get("brand", "–ë–µ–∑ –±—Ä–µ–Ω–¥–∞"),
            "price": current_price,
            "old_price": prod.get("priceU", 0) // 100,
            "rating": prod.get("reviewRating", 0),
            "feedbacks": prod.get("feedbacks", 0),
            "image": f"https://images.wbstatic.net/big/new/{prod['id']}-1.jpg",
            "url": f"https://www.wildberries.ru/catalog/{prod['id']}/detail.aspx"
        }
    except Exception as e:
        logger.error(f"API error: {e}")
        return None


def get_current_price(product_id):
    try:
        url = f"https://card.wb.ru/cards/detail?appType=1&curr=rub&dest=-1257786&nm={product_id}"
        headers = {
            'User-Agent': 'Mozilla/5.0',
            'Accept-Language': 'ru-RU'
        }
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code != 200:
            return None
        data = response.json()
        product = data.get("data", {}).get("products", [])[0]
        return product.get("salePriceU", 0) // 100
    except Exception as e:
        logger.error(f"[get_current_price] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {product_id}: {e}")
        return None



# ===== –ö–û–ú–ê–ù–î–´ =====
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ Wildberries.",
        reply_markup=get_main_menu()
    )


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Wildberries:",
        reply_markup=get_cancel_button()
    )


@dp.message(F.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def show_products(message: types.Message):
    user_id = message.from_user.id
    products = conn.execute(
        "SELECT product_id, name, last_price FROM products WHERE user_id=?",
        (user_id,)
    ).fetchall()

    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=get_main_menu())
        return

    text = "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
    for idx, (pid, name, price) in enumerate(products, 1):
        text += f"{idx}. {name}\nID: {pid} - {price} ‚ÇΩ\n\n"

    await message.answer(text, reply_markup=get_main_menu())


@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: types.Message):
    user_id = message.from_user.id
    products = conn.execute(
        "SELECT product_id, name FROM products WHERE user_id=?",
        (user_id,)
    ).fetchall()

    if not products:
        await message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_menu())
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for pid, name in products:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"‚ùå {name[:20]}...", callback_data=f"delete:{pid}")]
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–û–í–ê–†–û–í =====
@dp.message(F.text)
async def handle_product_input(message: types.Message):
    product_id = extract_product_id(message.text)
    if not product_id:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
        return

    data = get_product_data(product_id)
    if not data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.", reply_markup=get_main_menu())
        return

    await message.answer(
        f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä —Å ID: {product_id}",
        reply_markup=get_track_keyboard(product_id)
    )

    caption = (
        f"üÜî {product_id}\n"
        f"<a href='{data['url']}'>{data['name']}</a>\n"
        f"üè∑ {data['brand']}\n"
        f"üí∏ –¶–µ–Ω–∞: <b>{data['price']} ‚ÇΩ</b>\n"
        f"‚≠êÔ∏è {data['rating']} (–æ—Ç–∑—ã–≤–æ–≤: {data['feedbacks']})"
    )

    try:
        await message.answer_photo(
            photo=data['image'],
            caption=caption
        )
    except:
        await message.answer(caption)


# ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@dp.callback_query(F.data.startswith("track:"))
async def track_product(callback: types.CallbackQuery):
    product_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    data = get_product_data(product_id)

    if not data:
        await callback.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with conn:
        conn.execute(
            "INSERT OR REPLACE INTO products "
            "(user_id, product_id, name, brand, url, current_price) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, product_id, data['name'], data['brand'], data['url'], data['price'])
        )

    await callback.message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é!",
        reply_markup=get_main_menu()
    )


@dp.callback_query(F.data.startswith("delete:"))
async def delete_product(callback: types.CallbackQuery):
    product_id = callback.data.split(":")[1]
    user_id = callback.from_user.id

    with conn:
        conn.execute(
            "DELETE FROM products WHERE user_id=? AND product_id=?",
            (user_id, product_id)
        )

    await callback.message.answer(
        "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
        reply_markup=get_main_menu()
    )


# ===== –§–û–ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –¶–ï–ù =====
async def check_price_changes():
    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω...")

        products = conn.execute("""
            SELECT user_id, product_id, name, url, current_price 
            FROM products
            WHERE julianday('now') - julianday(last_check) > 0.041666  # ~1 —á–∞—Å –≤ –¥–Ω—è—Ö
            LIMIT 50
        """).fetchall()

        for user_id, pid, name, url, old_price in products:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                new_price = get_current_price(pid)

                if new_price is None:
                    continue

                if new_price != old_price:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    diff = new_price - old_price
                    trend = "üìà" if diff > 0 else "üìâ"

                    text = (
                        f"{trend} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>\n\n"
                        f"üõç <a href='{url}'>{name}</a>\n"
                        f"üí∞ –ë—ã–ª–æ: <s>{old_price} ‚ÇΩ</s> ‚Üí –°—Ç–∞–ª–æ: <b>{new_price} ‚ÇΩ</b>\n"
                        f"Œî {abs(diff)} ‚ÇΩ ({trend} {abs(round(diff / old_price * 100, 1))}%)\n"
                        f"üÜî <code>{pid}</code>"
                    )

                    await bot.send_message(user_id, text)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    conn.execute("""
                        UPDATE products 
                        SET current_price = ?, last_check = datetime('now')
                        WHERE product_id = ? AND user_id = ?
                    """, (new_price, pid, user_id))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã {pid}: {e}")

def force_test_price_change():
    with conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        conn.execute("""
            INSERT OR IGNORE INTO products 
            (user_id, product_id, name, brand, url, current_price)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (991168173, 74615560, "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", "–¢–µ—Å—Ç", "https://example.com", 999))
        conn.commit()

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    force_test_price_change()
    asyncio.create_task(check_price_changes())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())