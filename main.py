from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import asyncio
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = "8092555394:AAHwvVmGcJYGw3Gu_LZe4aJ0U3K1v2aHqUw"

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()


async def download_image(url):
    try:
        response = requests.get(url, stream=True, timeout=10)
        if response.status_code == 200:
            return response.content
        return None
    except Exception as e:
        logger.error(f"Error downloading image: {e}")
        return None


def get_product_data(product_id):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json',
    }

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        product_url = f"https://card.wb.ru/cards/detail?appType=1&curr=rub&dest=-1257786&nm={product_id}"
        response = requests.get(product_url, headers=headers, timeout=10)

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–≤–∞—Ä–∞: {response.status_code}")
            return None

        data = response.json()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        if not data or not isinstance(data.get('data'), dict):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API")
            return None

        products = data.get("data", {}).get("products", [])
        if not products:
            logger.error("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
            return None

        prod = products[0]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not all(key in prod for key in ['id', 'name', 'brand', 'salePriceU', 'priceU']):
            logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞")
            return None

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        product_id = str(prod.get('id'))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É
        name = prod.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        brand = prod.get('brand', '–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = f"https://images.wbstatic.net/big/new/{product_id}-1.jpg" if product_id else None

        return {
            "id": product_id,
            "name": name,
            "brand": brand,
            "price": prod.get("salePriceU", 0) // 100,
            "old_price": prod.get("priceU", 0) // 100,
            "rating": prod.get("reviewRating", 0),
            "feedbacks": prod.get("feedbacks", 0),
            "image": image_url,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None
    

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /track –∏ ID —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/track 12345678"
    )


@dp.message(Command("track"))
async def track_handler(message: types.Message):
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    if not args or not args.isdigit():
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ ID —Ç–æ–≤–∞—Ä–∞: `/track 210959469`", parse_mode="Markdown")
        return

    product_id = args
    await message.reply("üîç –ò—â—É —Ç–æ–≤–∞—Ä...")

    data = get_product_data(product_id)
    if not data:
        await message.reply("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä.")
        return

    caption = (
        f"üõç <b>{data['name']}</b>\n"
        f"üè∑ –ë—Ä–µ–Ω–¥: {data['brand']}\n"
        f"üí∏ –¶–µ–Ω–∞: <b>{data['price']} ‚ÇΩ</b>\n"
        f"üîª –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {data['old_price']} ‚ÇΩ\n"
        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {data['rating']} (–æ—Ç–∑—ã–≤–æ–≤: {data['feedbacks']})"
    )

    try:
        if data["image"]:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
            image_data = await download_image(data["image"])
            if image_data:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=types.BufferedInputFile(image_data, filename="product.jpg"),
                    caption=caption
                )
            else:
                await message.answer(caption)
        else:
            await message.answer(caption)
    except Exception as e:
        logger.error(f"Error sending photo: {e}")
        await message.answer(caption)


async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())